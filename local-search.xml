<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>300最长递增子序列</title>
    <link href="/2022/07/29/leetcode-day3/"/>
    <url>/2022/07/29/leetcode-day3/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：nums &#x3D; [10,9,2,5,3,7,101,18]<br>输出：4<br>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：nums &#x3D; [0,1,0,3,2,3]<br>输出：4<br>示例 3：</p><p>输入：nums &#x3D; [7,7,7,7,7,7,7]<br>输出：1</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>(1) dp[i] 表示下标为 i 的数及其之前最长递增子序列的个数；</p><p>(2) 递推公式为 if(nums[i]&gt;nums[j])    dp[i]&#x3D;max(dp[i],dp[j]+1)；</p><p>(3) 初始化 每个都是1；</p><p>(4) 遍历顺序 ：从前至后；</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;nums[i];<br>&#125;<br><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>) cout&lt;&lt;n&lt;&lt;endl;<br><span class="hljs-keyword">else</span><br>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">dp</span>(n,<span class="hljs-number">1</span>);<span class="hljs-comment">//初始化</span><br><span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(nums[i]&gt;nums[j])dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[j]+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(dp[i]&gt;result) result=dp[i];<br>&#125;<br>cout&lt;&lt;result&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode 每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>494目标和</title>
    <link href="/2022/07/28/leetcode-day2/"/>
    <url>/2022/07/28/leetcode-day2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个整数数组 nums 和一个整数 target 。</p><p>向数组中的每个整数前添加 ‘+’ 或 ‘-‘ ，然后串联起所有整数，可以构造一个 表达式 ：</p><p>例如，nums &#x3D; [2, 1] ，可以在 2 之前添加 ‘+’ ，在 1 之前添加 ‘-‘ ，然后串联起来得到表达式 “+2-1” 。<br>返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。</p><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：nums &#x3D; [1,1,1,1,1], target &#x3D; 3<br>输出：5<br>解释：一共有 5 种方法让最终目标和为 3 。<br>-1 + 1 + 1 + 1 + 1 &#x3D; 3<br>+1 - 1 + 1 + 1 + 1 &#x3D; 3<br>+1 + 1 - 1 + 1 + 1 &#x3D; 3<br>+1 + 1 + 1 - 1 + 1 &#x3D; 3<br>+1 + 1 + 1 + 1 - 1 &#x3D; 3</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：nums &#x3D; [1], target &#x3D; 1<br>输出：1</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>假设所有数的和是 sum，含有加号的数的和为 x ，那么含有减号的数的和就是 sum-x ；且依据题意，有x-(sum-x)&#x3D;target；所以 x&#x3D;(target+sum)&#x2F;2。问题变成了容量为 x 的01背包有多少种装载方法。递推公式&#x3D;&gt;dp[j]&#x3D;dp[j-num[0]]+dp[j-nums[1]]+···+dp[j-nums[n-1]]。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;nums[i];<br>    &#125;<br>    <span class="hljs-type">int</span> target;<br>    cin&gt;&gt;target;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        sum+=nums[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target)&gt;sum || (target+sum)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-type">int</span> bag=(target+sum)/<span class="hljs-number">2</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(bag+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=bag;j&gt;=nums[i];j--)<br>            &#123;<br>                dp[j]+=dp[j-nums[i]];<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;dp[bag]&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode 每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>416分割等和子集</title>
    <link href="/2022/07/27/leetcode-day1/"/>
    <url>/2022/07/27/leetcode-day1/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：nums &#x3D; [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。</p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：nums &#x3D; [1,2,3,5]<br>输出：false<br>解释：数组不能分割成两个元素和相等的子集。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>01背包问题，每个数字只有取和不取的两种可能。可以理解为容量为sum&#x2F;2的背包。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n,<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;nums[i];<br>    &#125;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        sum+=nums[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>    &#123;<br>    <span class="hljs-type">int</span> bag=sum/<span class="hljs-number">2</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(bag+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=bag;j&gt;=nums[i];j--)<br>        &#123;<br>            dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-nums[i]]+nums[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dp[bag]==bag)    cout&lt;&lt;<span class="hljs-string">&quot;true&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span>   cout&lt;&lt;<span class="hljs-string">&quot;false&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;false&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode 每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第三次上机实验代码</title>
    <link href="/2022/06/16/dsoj3/"/>
    <url>/2022/06/16/dsoj3/</url>
    
    <content type="html"><![CDATA[<p>+++</p><h3 id="任意二叉树的层次遍历"><a href="#任意二叉树的层次遍历" class="headerlink" title="任意二叉树的层次遍历"></a>任意二叉树的层次遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的层次遍历序列。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的层次遍历序列。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-type">int</span> data;<br>A* l;<br>A* r;<br>A* fa;<br>&#125;BTree[<span class="hljs-number">100</span>];<span class="hljs-comment">//一个结构体存放结点</span><br>queue &lt;A*&gt; q;<span class="hljs-comment">//用队列实现</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(A* x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br>q.<span class="hljs-built_in">push</span>(x);<span class="hljs-comment">//如果不空入队</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>A* current=q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//队头出队</span><br>cout&lt;&lt;current-&gt;data&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(current-&gt;l)<br>&#123;<br>q.<span class="hljs-built_in">push</span>(current-&gt;l);<span class="hljs-comment">//左孩子入队</span><br>&#125;<br><span class="hljs-keyword">if</span>(current-&gt;r)<br>&#123;<br>q.<span class="hljs-built_in">push</span>(current-&gt;r);<span class="hljs-comment">//右孩子入队</span><br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>BTree[i].data=i;<br>BTree[i].l=<span class="hljs-literal">NULL</span>;<br>BTree[i].r=<span class="hljs-literal">NULL</span>;<br>BTree[i].fa=<span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-type">int</span> a,b,c;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br><span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>)<br>&#123;<br>BTree[a].l=BTree+b;<br>BTree[b].fa=BTree+a;<br>&#125;<br><span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>)<br>&#123;<br>BTree[a].r=BTree+c;<br>BTree[c].fa=BTree+a;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> pos;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(BTree[i].fa==<span class="hljs-literal">NULL</span>)<br>&#123;<br>pos=i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-comment">//找根节点</span><br><span class="hljs-built_in">bfs</span>(BTree+pos);<span class="hljs-comment">//从根节点开始搜索</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小根堆的判定"><a href="#小根堆的判定" class="headerlink" title="小根堆的判定"></a>小根堆的判定</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>堆是以线性连续方式存储的完全二叉树，小根堆的每一个元素都不大于其左右孩子，现在给你n个完全二叉树数组存储序列，请编程判定相应完全二叉树数组存储序列是否为小根堆。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行n（n&lt;100），表示有n组测试用例。后边的n行，每一行都是相应完全二叉树数组存储序列(序列最长为100)。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>对应相应完全二叉树数组存储序列，判定为小根堆的输出True，否则输出False。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">30 </span><span class="hljs-number">26</span> <span class="hljs-number">27</span> <span class="hljs-number">88</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> PD[<span class="hljs-number">100</span>];<br><br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">100</span>;i++)<br>&#123;<br>PD[i]=<span class="hljs-number">99999</span>;<br>&#125;<br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> t;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;;i++)<br>&#123;<br>cin&gt;&gt;PD[i];<br><span class="hljs-keyword">if</span>(cin.<span class="hljs-built_in">get</span>()==<span class="hljs-string">&#x27;\n&#x27;</span>)<br>&#123;<br>t=i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=(t)/<span class="hljs-number">2</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(PD[j]&gt;PD[<span class="hljs-number">2</span>*j]||PD[j]&gt;PD[<span class="hljs-number">2</span>*j+<span class="hljs-number">1</span>])<br>&#123;<br>flag++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag) cout&lt;&lt;<span class="hljs-string">&quot;False&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;True&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小堆的形成"><a href="#最小堆的形成" class="headerlink" title="最小堆的形成"></a>最小堆的形成</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>现在给你n个结点的完全二叉树数组存储序列，请编程调整为最小堆，并输出相应最小堆的存储序列。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是n，第二行是n个结点的完全二叉树数组存储序列。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出相应最小堆的存储序列。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">53 </span><span class="hljs-number">17</span> <span class="hljs-number">78</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">65</span> <span class="hljs-number">87</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">9 </span><span class="hljs-number">17</span> <span class="hljs-number">65</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">78</span> <span class="hljs-number">87</span> <span class="hljs-number">53</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*1.从根结点处开始，选出左右孩子中值较小的孩子。</span><br><span class="hljs-comment"> 2.让小的孩子与其父亲进行比较。</span><br><span class="hljs-comment"> 若小的孩子比父亲还小，则该孩子与其父亲的位置进行交换。并将原来小的孩子的位置当成父亲继续向下进行调整，直到调整到叶子结点为止。</span><br><span class="hljs-comment"> 若小的孩子比父亲大，则不需处理了，调整完成，整个树已经是小堆了。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[<span class="hljs-number">205</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> *ary,<span class="hljs-type">int</span> pa)</span> </span>&#123;<br>     <span class="hljs-type">int</span> temp = ary[pa];<br>     <span class="hljs-type">int</span> cld = <span class="hljs-number">2</span>*pa;<br>     <span class="hljs-keyword">while</span> (cld &lt;=n) &#123;<br>     <span class="hljs-keyword">if</span> (cld + <span class="hljs-number">1</span> &lt;= n &amp;&amp; ary[cld + <span class="hljs-number">1</span>] &lt; ary[cld]) &#123;<br>             cld++;<br>         &#125;<span class="hljs-comment">//选出根节点的左孩子右孩子里面较小的</span><br>         <span class="hljs-keyword">if</span> (temp &lt;= ary[cld])  <span class="hljs-keyword">break</span>;<span class="hljs-comment">//小孩子比父亲大，不用管</span><br>         ary[pa] = ary[cld];<span class="hljs-comment">//小的孩子比父亲还小，则该孩子与其父亲的位置进行交换。并将原来小的孩子的位置当成父亲继续向下进行调整，直到调整到叶子结点为止。</span><br>         ary[cld]=temp;<br>         pa = cld;<br>         cld = <span class="hljs-number">2</span>*cld;<br>     &#125;<br> &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i= n/<span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-built_in">down</span>(a,i);<br>    &#125;<span class="hljs-comment">//左子树右子树都是最小堆</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无向图的深度优先搜索"><a href="#无向图的深度优先搜索" class="headerlink" title="无向图的深度优先搜索"></a>无向图的深度优先搜索</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，现在需要深度优先搜索，访问任一邻接顶点时编号小的顶点优先，请编程输出图G的深度优先搜索序列。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行2个数，分别表示一个边的两个顶点。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>该图从0号顶点开始的深度优先搜索序列。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m, sum;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">101</span>], e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span> </span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>cout&lt;&lt;cur&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>sum++;<br><span class="hljs-keyword">if</span> (sum == n) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (e[cur][i] == <span class="hljs-number">1</span> &amp;&amp; vis[i] == <span class="hljs-number">0</span>) &#123;<br>vis[i] = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(i);<span class="hljs-comment">//与广度优先搜索区别在于换结点了</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a,b,i,j;<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br><span class="hljs-keyword">if</span> (i == j) &#123;<br>e[i][j] = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>e[i][j] = <span class="hljs-number">999999999</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin&gt;&gt;a&gt;&gt;b;<br>e[a][b] = <span class="hljs-number">1</span>;<br>e[b][a] = <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">//把无向图用矩阵存储起来</span><br>vis[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//从第一个结点开始</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无向图的广度优先搜索"><a href="#无向图的广度优先搜索" class="headerlink" title="无向图的广度优先搜索"></a>无向图的广度优先搜索</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，现在需要广度优先搜索，访问任一邻接顶点时编号小的顶点优先，请编程输出图G的广度优先搜索序列。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行2个数，分别表示一个边的两个顶点。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>该图从0号顶点开始的广度优先搜索序列。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> book[<span class="hljs-number">101</span>],e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,a,b,m,n,cnt=<span class="hljs-number">0</span>,cur;<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j =<span class="hljs-number">0</span>; j &lt; m; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (i == j)<br>&#123;<br>e[i][j] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e[i][j] = <span class="hljs-number">999999</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b;<br>e[a][b] = <span class="hljs-number">1</span>;<br>e[b][a] = <span class="hljs-number">1</span>;<br> <br>&#125;<span class="hljs-comment">//建立一个矩阵存储</span><br>q.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//输出当前结点</span><br>book[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//表示遍历过了这个点</span><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>cur =q.<span class="hljs-built_in">front</span>();<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (e[cur][i] == <span class="hljs-number">1</span> &amp;&amp; book[i] == <span class="hljs-number">0</span>)<span class="hljs-comment">//有边而且这个点没有被访问过的话</span><br>&#123;<br>q.<span class="hljs-built_in">push</span>(i);<br>book[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (q.<span class="hljs-built_in">size</span>() &gt; m) <span class="hljs-keyword">break</span>;<br>&#125;<br>cout&lt;&lt;cur&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一个无向图G的顶点和边，顶点从0依次编号，请编程输出图G的最小生成树对应的边权之和。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>第一行是整数m和n（1&lt;m,n&lt;100），分别代表顶点数和边数。后边n行，每行3个数，分别表示一个边的两个顶点和该边的权值。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>最小生成树对应的边权之和。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">12</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">18<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXV = <span class="hljs-number">1000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3fffffff</span>;<br><span class="hljs-type">int</span> G[MAXV][MAXV];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">bool</span> vis[MAXV];<br><span class="hljs-type">int</span> d[MAXV];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) d[i]=INF;<br>d[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n;i++) &#123;<br><span class="hljs-type">int</span> u = <span class="hljs-number">-1</span>, min = INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n;j++) &#123;<br><span class="hljs-keyword">if</span>(vis[j] == <span class="hljs-literal">false</span> &amp;&amp; d[j] &lt; min) &#123;<br>u = j;<br>min = d[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(u == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>vis[u] = <span class="hljs-literal">true</span>;<br>ans += d[u];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; n; v++) &#123;<br><span class="hljs-keyword">if</span>(vis[v] == <span class="hljs-literal">false</span> &amp;&amp; G[u][v] != INF &amp;&amp; G[u][v] &lt; d[v]) d[v] = G[u][v];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> m, u, v, w;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j =<span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br><span class="hljs-keyword">if</span> (i == j) &#123;<br>G[i][j] = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>G[i][j] = <span class="hljs-number">999999</span>;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>G[u][v]=w;<br>G[v][u]=w;<br>&#125;<span class="hljs-comment">//赋值</span><br>cout&lt;&lt;<span class="hljs-built_in">prim</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构第二次上机实验代码</title>
    <link href="/2022/06/09/dsoj2/"/>
    <url>/2022/06/09/dsoj2/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构第二次实验（二叉树）"><a href="#数据结构第二次实验（二叉树）" class="headerlink" title="数据结构第二次实验（二叉树）"></a>数据结构第二次实验（二叉树）</h2><h3 id="满二叉树的前序遍历"><a href="#满二叉树的前序遍历" class="headerlink" title="满二叉树的前序遍历"></a>满二叉树的前序遍历</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的前序遍历序列。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的前序遍历序列。</p><h4 id="样例输入-Copy"><a href="#样例输入-Copy" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy"><a href="#样例输出-Copy" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BAC</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//满二叉树的前序遍历</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x])&#123;<br>        cout&lt;&lt;a[x];<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x);<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">predfs</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="满二叉树的中序遍历"><a href="#满二叉树的中序遍历" class="headerlink" title="满二叉树的中序遍历"></a>满二叉树的中序遍历</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的中序遍历序列。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的中序遍历序列。</p><h4 id="样例输入-Copy-1"><a href="#样例输入-Copy-1" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-1"><a href="#样例输出-Copy-1" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ABC</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//满二叉树的中序遍历</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x])&#123;<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x);<br>        cout&lt;&lt;a[x];<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">predfs</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="满二叉树的后序遍历"><a href="#满二叉树的后序遍历" class="headerlink" title="满二叉树的后序遍历"></a>满二叉树的后序遍历</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的后序遍历序列。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的后序遍历序列。</p><h4 id="样例输入-Copy-2"><a href="#样例输入-Copy-2" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-2"><a href="#样例输出-Copy-2" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ACB</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//满二叉树的后序遍历</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x])&#123;<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x);<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>);<br>        cout&lt;&lt;a[x];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">predfs</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="任意二叉树的前序遍历"><a href="#任意二叉树的前序遍历" class="headerlink" title="任意二叉树的前序遍历"></a>任意二叉树的前序遍历</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的前序遍历序列。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的前序遍历序列。</p><h4 id="样例输入-Copy-3"><a href="#样例输入-Copy-3" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-3"><a href="#样例输出-Copy-3" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//任意二叉树的前序遍历</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<span class="hljs-comment">//结点个数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    A *l;<br>    A *r;<br>    A *fa;<br>&#125;BTree[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(A *X)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(X!=<span class="hljs-literal">NULL</span>)&#123;<br>        cout&lt;&lt;X-&gt;data&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">predfs</span>(X-&gt;l);<br>        <span class="hljs-built_in">predfs</span>(X-&gt;r);<br>    &#125;<span class="hljs-comment">//前序遍历：根左右</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        BTree[i].data=i;<br>        BTree[i].fa=<span class="hljs-literal">NULL</span>;<br>        BTree[i].l=<span class="hljs-literal">NULL</span>;<br>        BTree[i].r=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            BTree[a].l=BTree+b;<br>            BTree[b].fa=BTree+a;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            BTree[a].r=BTree+c;<br>            BTree[c].fa=BTree+a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> pos;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(BTree[i].fa==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            pos=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">predfs</span>(BTree+pos);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="任意二叉树的中序遍历"><a href="#任意二叉树的中序遍历" class="headerlink" title="任意二叉树的中序遍历"></a>任意二叉树的中序遍历</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的中序遍历序列。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的中序遍历序列。</p><h4 id="样例输入-Copy-4"><a href="#样例输入-Copy-4" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-4"><a href="#样例输出-Copy-4" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> data;<span class="hljs-comment">//结点的值</span><br>    A *l;<br>    A *r;<br>    A *fa;<span class="hljs-comment">//结点的父亲</span><br>&#125;BTree[<span class="hljs-number">105</span>];<span class="hljs-comment">//A类型的数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(A *X)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(X!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">predfs</span>(X-&gt;l);<br>        cout&lt;&lt;X-&gt;data&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">predfs</span>(X-&gt;r);<br>    &#125;<br>&#125;<span class="hljs-comment">//根左右</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a,b,c;<span class="hljs-comment">//a是序号 b是左孩子 c是右孩子</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        BTree[i].data=i;<br>        BTree[i].fa=<span class="hljs-literal">NULL</span>;<br>        BTree[i].l=<span class="hljs-literal">NULL</span>;<br>        BTree[i].r=<span class="hljs-literal">NULL</span>;<br>    &#125;<span class="hljs-comment">//给四个结点初始化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//有左孩子</span><br>        &#123;<br>            BTree[a].l=BTree+b;<br>            BTree[b].fa=BTree+a;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//有右孩子</span><br>        &#123;<br>            BTree[a].r=BTree+c;<br>            BTree[c].fa=BTree+a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> pos;<span class="hljs-comment">//找出初始结点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(BTree[i].fa==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            pos=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">predfs</span>(BTree+pos);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="任意二叉树的后序遍历"><a href="#任意二叉树的后序遍历" class="headerlink" title="任意二叉树的后序遍历"></a>任意二叉树的后序遍历</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>有若干个节点，每个节点上都有编号，把这些节点随意地构成二叉树，请编程输出该二叉树的后序遍历序列。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于100）,表示有n个节点，每个节点按从1到n依次编号。第一行后有n行，每行三个正整数i、l、r，分别表示节点i及对应的左右孩子的编号，如果不存在孩子则以-1表示。三个整数之间用一个空格隔开。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>输出该二叉数的后序遍历序列。</p><h4 id="样例输入-Copy-5"><a href="#样例输入-Copy-5" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span>-<span class="hljs-number">1</span> -<span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-5"><a href="#样例输出-Copy-5" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    A *l;<br>    A *r;<br>    A *fa;<br>&#125;BTree[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(A *X)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(X!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">predfs</span>(X-&gt;l);<br>        <span class="hljs-built_in">predfs</span>(X-&gt;r);<br>        cout&lt;&lt;X-&gt;data&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a,b,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        BTree[i].data=i;<br>        BTree[i].fa=<span class="hljs-literal">NULL</span>;<br>        BTree[i].l=<span class="hljs-literal">NULL</span>;<br>        BTree[i].r=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(b!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            BTree[a].l=BTree+b;<br>            BTree[b].fa=BTree+a;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(c!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            BTree[a].r=BTree+c;<br>            BTree[c].fa=BTree+a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> pos;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(BTree[i].fa==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            pos=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">predfs</span>(BTree+pos);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="满二叉树的深度"><a href="#满二叉树的深度" class="headerlink" title="满二叉树的深度"></a>满二叉树的深度</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个满二叉树的层次遍历序列，请编程输出该二叉树的深度。</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>第一行是n（n小于26）,表示有n个节点。第二行是该满二叉树的节点对应字母的层次遍历序列。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>输出该满二叉数的深度。</p><h4 id="样例输入-Copy-6"><a href="#样例输入-Copy-6" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">3</span><br><span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span> C<br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-6"><a href="#样例输出-Copy-6" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//满二叉树的深度</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> a[<span class="hljs-number">30</span>];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[x])&#123;<br>        ans=<span class="hljs-built_in">max</span>(ans,<span class="hljs-built_in">int</span>(<span class="hljs-built_in">log2</span>(x)+<span class="hljs-number">1</span>));<span class="hljs-comment">//满二叉树的深度=log2(n)+1</span><br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x);<br>        <span class="hljs-built_in">predfs</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">predfs</span>(<span class="hljs-number">1</span>);<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="FBI树"><a href="#FBI树" class="headerlink" title="FBI树"></a>FBI树</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为 B 串，全“1”串称为 I 串，既含“0”又含“1”的串则称为 F 串。<br>FBI 树是一棵二叉树，它的结点类型也包括 F 结点，B 结点和 I 结点三种。由一个长度为 2N 的“01”串 S 可以构造出一棵 FBI 树 T，递归的构造方法如下：<br>(1) T 的根结点为 R，其类型与串 S 的类型相同；<br>(2) 若串 S 的长度大于 1，可将串 S 从中间分开，分为等长的左右子串 S1 和 S2；由左子串 S1 构造 R 的左子树 T1，由右子串 S2 构造 R 的右子树 T2。</p><p>现在给定一个长度为 2N 的“01”串，请用上述构造方法构造出一棵 FBI 树，并输出它的后序遍历序列。</p><h4 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h4><p>第一行是一个整数 N（0≤N≤10），第二行是一个长度为 2N 的“01”串。</p><h4 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h4><p>包括一行，这一行只包含一个字符串，即 FBI 树的后序遍历序列。</p><h4 id="样例输入-Copy-7"><a href="#样例输入-Copy-7" class="headerlink" title="样例输入 Copy"></a>样例输入 <a href="javascript:CopyToClipboard($('#sampleinput').text())">Copy</a></h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><br><span class="hljs-number">10001011</span><br></code></pre></td></tr></table></figure><h4 id="样例输出-Copy-7"><a href="#样例输出-Copy-7" class="headerlink" title="样例输出 Copy"></a>样例输出 <a href="javascript:CopyToClipboard($('#sampleoutput').text())">Copy</a></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">IBFBBBFIBFIIIFF</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> a[<span class="hljs-number">1024</span>];<br><span class="hljs-type">char</span> b[<span class="hljs-number">1024</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> pos)</span></span>&#123;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;0&#x27;</span>) x++;<br>        <span class="hljs-keyword">else</span> y++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span> &amp;&amp; y&gt;<span class="hljs-number">0</span>) b[pos]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span> &amp;&amp; y==<span class="hljs-number">0</span>) b[pos]=<span class="hljs-string">&#x27;B&#x27;</span>;<br>    <span class="hljs-keyword">else</span> b[pos]=<span class="hljs-string">&#x27;F&#x27;</span>;<br>    <span class="hljs-comment">//cout&lt;&lt;b[pos]&lt;&lt;&#x27; &#x27;;</span><br>    <span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">judge</span>(l,(l+r)/<span class="hljs-number">2</span>,<span class="hljs-number">2</span>*pos);<br>        <span class="hljs-built_in">judge</span>((l+r)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,r,<span class="hljs-number">2</span>*pos+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b[x])&#123;<br>        <span class="hljs-built_in">out</span>(<span class="hljs-number">2</span>*x);<br>        <span class="hljs-built_in">out</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>);<br>        cout&lt;&lt;b[x];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n);i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">judge</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n),<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">out</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// FBI</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/06/09/dsoj1/"/>
    <url>/2022/06/09/dsoj1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关系数据库标准语言SQL</title>
    <link href="/2022/04/13/SQL/"/>
    <url>/2022/04/13/SQL/</url>
    
    <content type="html"><![CDATA[<h3 id="SQL核心功能"><a href="#SQL核心功能" class="headerlink" title="SQL核心功能"></a>SQL核心功能</h3><ol><li>数据查询：select</li><li>数据定义：create、drop、alter</li><li>数据操作：insert、update、delete</li><li>数据控制：grant、revoke</li></ol><h3 id="SQL的定义功能"><a href="#SQL的定义功能" class="headerlink" title="SQL的定义功能"></a>SQL的定义功能</h3><ol><li>定义基本表的结构</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>[完整性约束条件]，<br><span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>[完整性约束条件]，<br>[表级完整性约束条件]<br>);<br></code></pre></td></tr></table></figure><p>表是要定义的基本表的名字，表由多个属性组成。定义表的各个属性的时候要指明数据类型和长度。</p><p>完整性约束条件包括列、元组、表级完整性约束条件。用户自定义完整性约束条件（唯一性约束：UNIQUE、非空值约束：NOT NULL）属于列级约束条件，而实体完整性（主键 PRIMARY KEY）、参照完整性（外键 FOREIGN KEY）都属于表级的完整性约束条件。</p><ul><li><p>主关键字的定义</p><ul><li>在属性那一行加上一句PRIMARY KEY就可以表名这个属性是这个表的主关键字。</li><li>在列完所有属性以后加上一句PRIMARY KEY（属性1，属性2···）</li></ul><p>如果关键字是由多个属性组成的，一定要用第二种方法才行。</p></li><li><p>外部关键字的定义</p><ul><li>只有一个属性是外部关键字的话，可以直接在属性的说明和类型后面加上一句    REFERENNCES  表名   (属性)</li><li>如果很多个属性都是关键字的话，那就在属性列表的最后一句加上 FOREIGN KEY  (属性1)  REFERENCES  表名 (属性2)</li></ul></li><li><p>默认值的定义</p><ul><li>在定义属性后面加一个保留字DEFAULT</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 不能取空值，也不能取一个重复的值</span><br>性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span>,<br>姓名 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>出生年份 <span class="hljs-type">smallint</span>,<br>籍贯 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>学院 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">PRIMARY</span> KEY(学号)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> lesson<br>(课程号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>课程名 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br>学时 <span class="hljs-type">smallint</span>,<br>开课学期 <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>课程性质 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">PRIMARY</span> KEY(课程号)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> study<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>课程号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>成绩 samllint,<br><span class="hljs-keyword">PRIMARY</span> KEY(学号,课程号),<br><span class="hljs-keyword">FOREIGN</span> KEY(学号) <span class="hljs-keyword">REFERENCES</span> 学生(学号),<br><span class="hljs-keyword">FOREIGN</span> KEY(学号) <span class="hljs-keyword">REFERENCES</span> 课程(课程名)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> study<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">references</span> 学生(学号),<br>课程号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">references</span> 课程(课程号),<br>成绩 <span class="hljs-type">smallint</span>,<br><span class="hljs-keyword">primary</span> key(学号,课程号)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用户自定义完整性约束</span><br><span class="hljs-comment">-- 列值约束</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 不能取空值，也不能取一个重复的值</span><br>性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <br><span class="hljs-keyword">check</span>(性别<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">or</span> 性别<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>),<br>姓名 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>出生年份 <span class="hljs-type">smallint</span>,<br>籍贯 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>学院 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">PRIMARY</span> KEY(学号)<br>);<br><span class="hljs-comment">-- 默认值约束，默认值是提前给某列指定的取值</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 不能取空值，也不能取一个重复的值</span><br>性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span>,<br>姓名 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>出生年份 <span class="hljs-type">smallint</span>,<br>籍贯 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>学院 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">PRIMARY</span> KEY(学号)<br>);<br></code></pre></td></tr></table></figure><h3 id="SQL的修改和删除"><a href="#SQL的修改和删除" class="headerlink" title="SQL的修改和删除"></a>SQL的修改和删除</h3><ol><li><p>修改基本表</p><p>语法格式(COLUMN 是可要可不要的)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">ADD</span> 新列名 数据类型 完整性约束 <span class="hljs-comment">-- 增加新的列和新的完整性约束条件</span><br><span class="hljs-keyword">DROP</span> 列名完整性约束名<br>MODIFY <span class="hljs-keyword">COLUMN</span> 列名 数据类型<br></code></pre></td></tr></table></figure><ul><li>表名是要修改的基本表，ADD子句用于增加新的属性列和新的完整性约束条件，DROP用于删除约束条件，ALTER COLUMN子句用于修改原来有的列的定于包括列名数据类型。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> 年龄 <span class="hljs-type">SMALLINT</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">ADD</span> 入学日期 <span class="hljs-type">DATE</span>;<span class="hljs-comment">-- 不论基本表中原来是否已有数据，新增加的一列一律取空值</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(学号);<span class="hljs-comment">-- 也可以只增加约束条件，可以是主码、外码、取值唯一等常用的列级约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span>(姓名);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学习 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">FOREIGN</span> KEY(学号) <span class="hljs-keyword">REFERENCES</span> 学生(学号);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> 年龄; <span class="hljs-comment">-- 删除列</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">DROP</span> 入学日期;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 学生 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY; <span class="hljs-comment">-- 删除属性</span><br><span class="hljs-comment">-- 也可以通过给约束起名字，然后通过约束名字去删除</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 课程 MODIFY <span class="hljs-keyword">COLUMN</span> 课程名 <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除基本表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名 <br>restrict:受限删除<br>cascade:级联删除<br></code></pre></td></tr></table></figure></li></ol><h3 id="索引的建立与删除"><a href="#索引的建立与删除" class="headerlink" title="索引的建立与删除"></a>索引的建立与删除</h3><p>顺序访问的执行效率很低，所以被抛弃；索引能帮助用户快速地找到自己想要的数据。</p><p>搜索码：用于在文件中查找记录的属性或者属性集</p><p>索引是根据关系表当中某些字段的值，按照一定结构存放的文件（B+树）</p><p>索引分类：</p><ul><li>聚集索引：字典按照拼音</li><li>非聚集索引：字典按照部首</li></ul><ol><li><p>建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> [<span class="hljs-keyword">unique</span>] [cluster] index 索引名 <span class="hljs-keyword">on</span> 表名(列名[次序],···)<br></code></pre></td></tr></table></figure><p>ASC是升序，DESC是降序。</p><ul><li><p>为学生、课程和学习表建立索引；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index stu_idx_sno <span class="hljs-keyword">on</span> 学生(学号);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index cou_idx_cno <span class="hljs-keyword">on</span> 课程(课程号);<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">unique</span> index sc_idx _cno <span class="hljs-keyword">on</span> 学习(学号<span class="hljs-keyword">ASC</span>,课程号<span class="hljs-keyword">DESC</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX 索引名;<br><span class="hljs-keyword">DROP</span> INDEX stu_idx_sno;<br></code></pre></td></tr></table></figure></li></ol><h3 id="数据查询-重点"><a href="#数据查询-重点" class="headerlink" title="数据查询(重点)"></a>数据查询(重点)</h3><ul><li><p>单表查询（只用了一张表）</p><p>select …from…where…group by…having…order by…</p><p>学生（学号，姓名，性别，籍贯，出生年份，学院）</p><p>课程（课程号，课程名，学时，先修课程号，课程性质）</p><p>学习（学号，课程号，成绩）</p><ul><li><p>选择表中若干列（投影）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,籍贯<br><span class="hljs-keyword">from</span> 学生;<span class="hljs-comment">-- 默认获得重复的元组</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 姓名,籍贯<br><span class="hljs-keyword">from</span> 学生;<span class="hljs-comment">-- 默认重复列中只取一列</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生;<span class="hljs-comment">-- 选出所有</span><br><br><span class="hljs-keyword">select</span> 学号,<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份<br><span class="hljs-keyword">from</span> 学生;<br><span class="hljs-keyword">select</span> 学号,<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份 <span class="hljs-keyword">as</span> 年龄 <span class="hljs-comment">-- 给列定义别名</span><br><span class="hljs-keyword">from</span> 学生;<br></code></pre></td></tr></table></figure></li><li><p>选择表中若干元组（选择）</p><table><thead><tr><th align="center">查询条件</th><th align="center">谓词</th></tr></thead><tbody><tr><td align="center">比较</td><td align="center">&#x3D;、&lt;&gt;、&gt;、&lt;、&lt;&#x3D;、&gt;&#x3D;</td></tr><tr><td align="center">算术运算</td><td align="center">+、-、*、&#x2F;</td></tr><tr><td align="center">确定范围</td><td align="center">BETWEEN AND&#x2F;NOT BETWEEN AND</td></tr><tr><td align="center">确定集合</td><td align="center">IN&#x2F;NOT IN</td></tr><tr><td align="center">字符匹配</td><td align="center">LIKE&#x2F;NOT LIKE</td></tr><tr><td align="center">空值</td><td align="center">IS NULL&#x2F;IS NOT NULL</td></tr><tr><td align="center">多重条件</td><td align="center">AND&#x2F;OR</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 学号,课程,成绩<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 成绩<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 学号<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 成绩<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span>&quot;信电&quot;<br><span class="hljs-keyword">and</span> 出生年份<span class="hljs-operator">&gt;=</span><span class="hljs-number">2000</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,性别,学院,出生年份<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 出生年份 <span class="hljs-keyword">between</span> <span class="hljs-number">1996</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1998</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,性别,学院<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院 <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;信电&#x27;</span>,<span class="hljs-string">&#x27;环测&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,性别,学院<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;信电&#x27;</span>,<span class="hljs-string">&#x27;环测&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,学号<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 姓名 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;王%&#x27;</span>;<span class="hljs-comment">-- 姓王的学生</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名,学号<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 姓名 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_王%&#x27;</span>;<span class="hljs-comment">-- 第二个字为王的学生</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#如果本身含有<span class="hljs-operator">%</span>和_,加个<span class="hljs-keyword">escape</span>让后面的符号不是通配符<br><span class="hljs-keyword">where</span> 课程号 <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;DB\_Design&#x27;</span> <span class="hljs-keyword">ESCAPE</span><span class="hljs-string">&#x27;\&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WHERE</span> 成绩 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<span class="hljs-comment">-- 不能换成等于号</span><br></code></pre></td></tr></table></figure></li><li><p>对查询进行分组</p><ul><li><p>group by 查询各个课程号相应选课人数</p></li><li><p>select 子句后面只能出现用于分组的属性列和集函数。</p></li><li><p>细化了集函数的作用对象，集函数作用于整个查询结果，分组以后，作用于每个组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 课程号,<span class="hljs-built_in">count</span>(学号)<span class="hljs-keyword">as</span> 选课人数<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 课程号;<span class="hljs-comment">-- 查询各个课程号对应的选课人数</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>having子句</p><ul><li><p>查询学号在091501-091506至少选修了三门课程的学生的学号和选修课课程数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 学号,<span class="hljs-built_in">count</span>(课程号)<span class="hljs-keyword">as</span> 选课数<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 序号 <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;091501&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;091506&#x27;</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 学号<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(课程号)<span class="hljs-operator">&gt;=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用集函数</p><p>计数（count）、计算总和（sum）、计算平均值（avg）、求最大值（max）、求最小值（min）</p><blockquote><p>max &lt;distinct&#x2F;all&gt; 列名</p><p>distinct 表示去掉重复的，all表示不取消重复值，all为缺省值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">as</span> 总人数<br><span class="hljs-keyword">from</span> 学生;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份) <span class="hljs-keyword">as</span> 平均年龄<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(成绩) <span class="hljs-keyword">as</span> 最高分<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>对查询结果进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 学号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 成绩 <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">Order</span> <span class="hljs-keyword">by</span> 学院 <span class="hljs-keyword">asc</span>,<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份 <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多表查询</p><p>前面的查询都是针对一个表进行的，若查询涉及两个及以上的表，则称之为连接查询。</p><ul><li><p>等值连接</p><p>方法分为theta和ANSI方式</p></li></ul><ol><li><p>ANSI</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">表一 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 表二 <span class="hljs-keyword">on</span> 连接条件<br><span class="hljs-comment">-- 查询学生及其选修课程情况，要将这两个表学号相同的连接起来</span><br><span class="hljs-keyword">select</span> 学生.<span class="hljs-operator">*</span>,学号.<span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号;<br></code></pre></td></tr></table></figure></li><li><p>theta</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 运用where子句</span><br><span class="hljs-keyword">select</span> 学生.<span class="hljs-operator">*</span>,学习.<span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生,学习<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>等值连接和非等值连接</p><p>用来连接两个表的条件称为连接条件或者连接谓词。</p><p>连接的时候连接的列名必须是可比的，不一定相同，但是类型要一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">表名<span class="hljs-number">1.</span>列名<span class="hljs-number">1</span> 比较运算符 表名<span class="hljs-number">2.</span>列名<span class="hljs-number">2</span> <span class="hljs-comment">-- 比较运算符一般有&gt;=,&lt;=,&gt;,&lt;,=,!=</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">表名<span class="hljs-number">1.</span>列名<span class="hljs-number">1</span> <span class="hljs-keyword">between</span> 表名<span class="hljs-number">2.</span>列名<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> 表名<span class="hljs-number">2.</span>列名<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>自然连接是等值连接运算的一种特殊情况，也就是对相同属性进行连接，但是在最后的大表中去掉了重复的属性列，保留了所有不重复的属性列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 自然连接学习表和学生表</span><br><span class="hljs-keyword">select</span> 学生.学号,性别,姓名,出生年份,学院,课程号,成绩<br><span class="hljs-keyword">from</span> 学生,学习<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号;<br></code></pre></td></tr></table></figure></li><li><p>自连接查询</p><p>一个表与自己进行连接，关系代数是笛卡尔乘积，需要给自己起别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 求一门课程的间接先修课</span><br><span class="hljs-keyword">select</span> first.课程号 <span class="hljs-keyword">as</span> 课程号, first.课程名 <span class="hljs-keyword">as</span> 课程名, second.先修课程号 <span class="hljs-keyword">as</span> 间接先修课程号<br><span class="hljs-keyword">from</span> 课程 <span class="hljs-keyword">as</span> <span class="hljs-keyword">first</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 课程 <span class="hljs-keyword">as</span> <span class="hljs-keyword">second</span> <span class="hljs-keyword">on</span> first.先修课程号<span class="hljs-operator">=</span>second.课程号;<br><span class="hljs-comment">-- 查询和刘晨在同一个学院学习的学生的姓名</span><br><span class="hljs-keyword">select</span> s2.姓名<br><span class="hljs-keyword">from</span> 学生 <span class="hljs-keyword">as</span> s1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学生 <span class="hljs-keyword">as</span> s2 <span class="hljs-keyword">on</span> s1.学院<span class="hljs-operator">=</span>s2.学院<br><span class="hljs-keyword">where</span> s1.姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘晨&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>外连接查询</p><p>外连接的方式可以分为theta和ansi两种，theta方式主要使用where子句，ansi主要使用outer、join、on等关键字。</p><p>1） 左外连接（left outer jion)：查询学生的姓名以及他们选修课程的课程号和成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- theta 方式</span><br><span class="hljs-keyword">select</span> 姓名,课程号,成绩<br><span class="hljs-keyword">from</span> 学生,学习<br><span class="hljs-keyword">where</span> 学习.学号(<span class="hljs-operator">+</span>)<span class="hljs-operator">=</span>学生.学号;<br><span class="hljs-comment">-- ansi方式</span><br><span class="hljs-keyword">select</span> 姓名,课程号,成绩、<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号;<br></code></pre></td></tr></table></figure><p>2） 右外连接（right outer jion）：查询所有的课程信息及选修该课程的学生的学号以及成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- theta方式</span><br><span class="hljs-keyword">select</span> 课程名,学号,成绩<br><span class="hljs-keyword">from</span> 学习,课程<br><span class="hljs-keyword">where</span>课程.课程号<span class="hljs-operator">=</span>(<span class="hljs-operator">+</span>)学习.课程号;<br><span class="hljs-comment">-- ansi方式</span><br><span class="hljs-keyword">select</span> 课程名,学号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> 课程 <span class="hljs-keyword">on</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号;<br></code></pre></td></tr></table></figure></li><li><p>复合条件连接查询(where子句有多个条件)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 学生.学号,姓名,成绩<br><span class="hljs-keyword">from</span> 学生,学习<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span><br><span class="hljs-keyword">and</span> 学习.成绩<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>;<span class="hljs-comment">-- theta</span><br><br><span class="hljs-keyword">select</span> 学生.学号,姓名,成绩<br><span class="hljs-keyword">from</span> 学生 <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span><br><span class="hljs-keyword">and</span> 学习.成绩<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>; <span class="hljs-comment">-- ansi</span><br><br><span class="hljs-keyword">select</span> 学生.学号,姓名,课程号,学习.成绩<br><span class="hljs-keyword">from</span> 学生,学习,课程<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号; <span class="hljs-comment">-- 多表连接，查询每个学生选修的课程名以及成绩</span><br></code></pre></td></tr></table></figure></li><li><p>集合运算查询（交、并、差）</p></li><li><p>ps：书上用的下面的写法， 是有问题的，不对，他不会展示学生选的其余课程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql">交<span class="hljs-operator">-</span><span class="hljs-keyword">union</span><br>并<span class="hljs-operator">-</span><span class="hljs-keyword">intersect</span><br>差<span class="hljs-operator">-</span><span class="hljs-keyword">except</span><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">union</span>  <span class="hljs-comment">-- 想保留重复的时候用union all，也可以用or</span><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>);<br><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">intersect</span>  <span class="hljs-comment">-- 想保留重复的时候用intersect all，mysql不支持，可以换in或者exists</span><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>);<br><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">except</span>   <span class="hljs-comment">-- 想保留重复的时候用except all，MySQL不支持，可以换not in或者not exists</span><br>(<span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span>(<br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">union</span>  <br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>));<br><span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span>(<br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">INTERSECT</span>  <br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>));<br><span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span>(<br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>)<br><span class="hljs-keyword">EXCEPT</span> <br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>));<br></code></pre></td></tr></table></figure></li></ul></li><li><p>嵌套查询</p><p>一个select ···from ···where称为一个查询块，将一个查询块嵌套在另一个查询块里面的<strong>where子句</strong>或者<strong>having条件</strong>中的叫做嵌套查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180101&#x27;</span>); <span class="hljs-comment">-- 查询选修了180101课程号的学生的姓名</span><br></code></pre></td></tr></table></figure><p>上层的查询叫做父查询，下层的查询叫做子查询，允许多层嵌套查询，子查询不能用order by。</p><ul><li><p>带in谓词的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询与王颖在同一个学院学习的学生学号和姓名</span><br><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院 <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> 学院<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;王颖&#x27;</span>);<br><br><span class="hljs-comment">-- 查询选修了数据库原理这门课的学生学号和姓名</span><br><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号 <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> 课程号<br><span class="hljs-keyword">from</span> 课程<br><span class="hljs-keyword">where</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li><p>带有比较运算符的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号 <span class="hljs-operator">=</span> <span class="hljs-comment">-- 比较运算符只能返回单值</span><br>(<span class="hljs-keyword">select</span> 课程号<br><span class="hljs-keyword">from</span> 课程<br><span class="hljs-keyword">where</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span>));<br><br><span class="hljs-comment">-- 查询180106课程中成绩高于课程平均分的学生学号姓名成绩</span><br><span class="hljs-keyword">select</span> 学生.学号,姓名,成绩<br><span class="hljs-keyword">from</span> 学生 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180106&#x27;</span><br><span class="hljs-keyword">and</span> 成绩<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">select</span> avg（成绩) <span class="hljs-keyword">as</span> 课程平均分<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180106&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>带有any或者all谓词的子查询</p><table><thead><tr><th>&gt;</th><th>大于子查询结果的某个值</th><th>大于子查询结果的所有值</th></tr></thead><tbody><tr><td>&lt;</td><td>小于子查询结果的某个值</td><td>小于子查询结果的所有值</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于子查询结果的某个值</td><td>大于等于子查询结果的所有值</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于子查询结果的某个值</td><td>小于等于子查询结果的所有值</td></tr><tr><td>&#x3D;</td><td>等于子查询结果的某个值</td><td>没意义</td></tr><tr><td>!&#x3D;</td><td>不等于子查询结果的某个值</td><td>不等于子查询结果的任何一个值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询其他学院比计算机学院某个学生年龄小的学生名单，排序，也可以用集函数max</span><br><span class="hljs-keyword">select</span> 姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份<span class="hljs-operator">&lt;</span><span class="hljs-keyword">any</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>)<br><span class="hljs-keyword">and</span> 学院<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份 <span class="hljs-keyword">desc</span>;<br><br><span class="hljs-keyword">select</span> 姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份<span class="hljs-operator">&lt;</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份)<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>)<br><span class="hljs-keyword">and</span> 学院<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure><p>集函数和any&#x2F;all对应关系</p><table><thead><tr><th align="center"></th><th align="center">&#x3D;</th><th align="center">&lt;&gt;&#x2F;!&#x3D;</th><th align="center">&lt;</th><th align="center">&lt;&#x3D;</th><th align="center">&gt;</th><th align="center">&gt;&#x3D;</th></tr></thead><tbody><tr><td align="center">any</td><td align="center">in</td><td align="center">–</td><td align="center">&lt;max</td><td align="center">&lt;&#x3D;max</td><td align="center">&gt;min</td><td align="center">&gt;&#x3D;min</td></tr><tr><td align="center">all</td><td align="center">–</td><td align="center">not in</td><td align="center">&lt;min</td><td align="center">&lt;&#x3D;min</td><td align="center">&gt;max</td><td align="center">&gt;&#x3D;max</td></tr></tbody></table></li><li><p>带有exists谓词的子查询</p><p>exists代表存在量词，不返回任何数据，只返回true或者false。一般用*。</p><p>带有 exists 谓词的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询选修了180102号课程的学生学号和姓名</span><br><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;180102&#x27;</span>);<br><span class="hljs-comment">-- 查询没有选修数据库原理课程的学生</span><br><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 课程 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 课程.课程号<span class="hljs-operator">=</span>学习.课程号<br><span class="hljs-keyword">where</span> 学习.学号<span class="hljs-operator">=</span>学生.学号<br><span class="hljs-keyword">and</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>除运算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 选修过全部课程的学生的学号和姓名</span><br><span class="hljs-comment">-- 该学生选修的课的集合包含所有课程的集合</span><br><span class="hljs-comment">-- 不存在（B-A），B是小集合，A是大集合</span><br><span class="hljs-keyword">select</span> 学号,姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 课程<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学习.学号<span class="hljs-operator">=</span>学生.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号));<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询至少选修了091501学生选修的全部课程的学生学号</span><br><span class="hljs-comment">-- 某位学生选修的课程是大集合 091501学生选修的全部课程是小集合</span><br><span class="hljs-keyword">select</span> 学号<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学习 <span class="hljs-keyword">as</span> <span class="hljs-keyword">first</span><br> <span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091501&#x27;</span><span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span>  学习 <span class="hljs-keyword">as</span> <span class="hljs-keyword">second</span><br><span class="hljs-keyword">where</span> second.学号<span class="hljs-operator">=</span>学生.学号<br><span class="hljs-keyword">and</span> second.课程号<span class="hljs-operator">=</span>first.课程号));<br><span class="hljs-comment">-- 查询选修了全部课程的学生的姓名</span><br><span class="hljs-comment">-- 某位学生选的课是大集合，全部课程是小集合</span><br><span class="hljs-keyword">select</span> 姓名<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 课程<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学习.学号<span class="hljs-operator">=</span>学生.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号));<br><span class="hljs-comment">-- 查询被所有学生都选修的课程名称</span><br><span class="hljs-comment">-- 某个课程选修的人是大集合 全部学生是小集合</span><br><span class="hljs-keyword">select</span> 课程名<br><span class="hljs-keyword">from</span> 课程<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 学习.学号<span class="hljs-operator">=</span>学生.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号));<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><ul><li><p>插入数据</p><ul><li><p>功能：将新的元组插入表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入单个元组</span><br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">into</span> 学生<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;091530&#x27;</span>,<span class="hljs-string">&#x27;夏雨&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;海南&#x27;</span>,<span class="hljs-string">&#x27;1999&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>)<br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">into</span>学习（学号，课程号）<br><span class="hljs-keyword">values</span>（‘<span class="hljs-number">091530</span>’，‘<span class="hljs-number">080102</span>’）;<span class="hljs-comment">-- 没有的列取空值</span><br><br><span class="hljs-comment">-- 插入子查询结果</span><br><span class="hljs-comment">-- 统计每门课平均分，把结果存进去表中</span><br><span class="hljs-comment">-- 第一步：建表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 课程平均分<br>(课程名 <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br>课程号 <span class="hljs-type">char</span>(<span class="hljs-number">8</span>),<br>平均分 <span class="hljs-keyword">double</span>);<br><span class="hljs-comment">-- 第二步：插入数据</span><br><span class="hljs-keyword">INSERT</span> <br><span class="hljs-keyword">INTO</span> 课程平均分(课程号,课程名,平均分)<br><span class="hljs-keyword">select</span> 课程号,课程名,<span class="hljs-built_in">avg</span>(成绩)<br><span class="hljs-keyword">from</span> 学习,课程<br><span class="hljs-keyword">where</span> 课程.课程号<span class="hljs-operator">=</span>学习.课程号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 课程名,课程号;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改数据（带有where子句）</p><ul><li><p>如果只修改一行，那么where子句具有唯一性</p><ul><li><p>将091611号学生籍贯改为江苏(修改某个元组)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 学生<br><span class="hljs-keyword">SET</span> 籍贯<span class="hljs-operator">=</span><span class="hljs-string">&#x27;江苏&#x27;</span><br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091611&#x27;</span>;<span class="hljs-comment">-- 学号唯一</span><br></code></pre></td></tr></table></figure></li><li><p>将选修了180101号课程的学生成绩增加一分（修改多个元组）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE 学习<br>SET 成绩=成绩+1<br>where 课程号=&#x27;180101&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>将计算机学院学生成绩清零（带有子查询）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE 学习<br>SET 成绩=0<br>WHERE 学号 in<br>(SELECT 学号<br>FROM 学生<br>where 学院=&#x27;计算机学院&#x27;);<br><br>set SQL_safe_updates=0;<br>UPDATE 学习<br>SET 成绩=0<br>WHERE EXISTS<br>(SELECT *<br>FROM 学生<br>where 学院=&#x27;计算机&#x27;<br>and 学生.学号=学习.学号);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>删除数据</p><p>成行删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <br><span class="hljs-keyword">FROM</span> 学生<br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;092010&#x27;</span>;<span class="hljs-comment">-- 删掉一些元组</span><br><br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> 学习;<span class="hljs-comment">-- 删掉所有元组</span><br><br><span class="hljs-comment">-- 带有子查询</span><br><span class="hljs-keyword">DELETE</span> <br><span class="hljs-keyword">FROM</span> 学习<br><span class="hljs-keyword">WHERE</span> 学号 <span class="hljs-keyword">IN</span> <br>(SELETE 学号<br><span class="hljs-keyword">FROM</span> 学生<br><span class="hljs-keyword">WHERE</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>);<br><br><span class="hljs-keyword">DELETE</span> <br><span class="hljs-keyword">FROM</span> 学习<br><span class="hljs-keyword">WHERE</span> 学号 <span class="hljs-keyword">EXISTS</span><br>(SELETE 学号<br><span class="hljs-keyword">FROM</span> 学生<br><span class="hljs-keyword">WHERE</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-keyword">AND</span> 学生.学号<span class="hljs-operator">=</span>学习.学号);<br></code></pre></td></tr></table></figure></li></ul><h3 id="视图（也是一种表）"><a href="#视图（也是一种表）" class="headerlink" title="视图（也是一种表）"></a>视图（也是一种表）</h3><p>​    功能：提高了数据的安全性</p><p>​    新建的视图后面的属性列是新取的名字，不存在冲突问题。与之前的表没有什么关系，也可以换名字</p><ul><li><p>建立视图</p><ul><li><p>行列子集视图（从单个基本表抽取若干行若干列）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立计算机学院学生的视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CS_STU<br><span class="hljs-keyword">AS</span><br>SELETE 学号,姓名,籍贯<br><span class="hljs-keyword">FROM</span> 学生<br><span class="hljs-keyword">WHERE</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br><span class="hljs-comment">-- 如果后面加上with check option 的话表示透过视图进行数据更新，修改插入删除操作都会自动检查是否是计算机学院的学生</span><br></code></pre></td></tr></table></figure></li><li><p>基于多个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立计算机学院选修了《数据库原理》的学生成绩视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cs_db(学号,姓名,成绩)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学生.学号,姓名,成绩<br><span class="hljs-keyword">from</span> 学生,学习,课程<br><span class="hljs-keyword">where</span> 学生.学号<span class="hljs-operator">=</span>学习.学号、<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号<br><span class="hljs-keyword">and</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-keyword">and</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>基于视图的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立计算机学院选修《数据库原理》而且成绩在九十分以上的同学的视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cs_db_good<span class="hljs-comment">-- 后面不写的话直接用select的，select后面必须有</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学号,姓名,成绩<br><span class="hljs-keyword">from</span> cs_db<br><span class="hljs-keyword">where</span> 成绩<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure></li><li><p>带有表达式的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立一个反映学生年龄的视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_age(学号,姓名,年龄)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学号,姓名,<span class="hljs-keyword">year</span>(now())<span class="hljs-operator">-</span>出生年份<br><span class="hljs-keyword">from</span> 学生;<br></code></pre></td></tr></table></figure></li><li><p>带有分组的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立学生平均成绩视图，显示学号、姓名以及平均成绩</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_grade(学号,姓名,平均成绩)<span class="hljs-comment">-- 视图相当于新建一个表，所以不需要学生.学号，相当于重新定义列，后面如果不写直接用select的</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学生.学号,姓名,<span class="hljs-built_in">avg</span>(成绩) <span class="hljs-keyword">as</span> 平均成绩<br><span class="hljs-keyword">from</span> 学习 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学生 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 姓名,学生.学号;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> 视图名;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> stu_grade;<br></code></pre></td></tr></table></figure></li><li><p>查询视图(其实就是查询基本表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">cs_stu 定义：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cs_stu<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学号,姓名,籍贯<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询每门课中成绩高于平均分的学生学号</span><br><span class="hljs-keyword">select</span> sname,cname,grade<br><span class="hljs-keyword">from</span> s <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> sc <span class="hljs-keyword">as</span> s1 <span class="hljs-keyword">on</span> s.sno<span class="hljs-operator">=</span>s1.sno<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> c <span class="hljs-keyword">on</span> s1.cno<span class="hljs-operator">=</span>c.cno<br><span class="hljs-keyword">where</span> grade<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc <span class="hljs-keyword">as</span> s2<br><span class="hljs-keyword">where</span> s2.cno<span class="hljs-operator">=</span>s1.cno);<br><span class="hljs-comment">-- 改为(视图表里面有成绩课程号课程名)</span><br><span class="hljs-keyword">select</span> sname,cname,grade<br><span class="hljs-keyword">from</span> sc <span class="hljs-keyword">as</span> s1 <span class="hljs-keyword">join</span> avg_cou <span class="hljs-keyword">on</span> s1.cno<span class="hljs-operator">=</span>avg_cou.cno<br><span class="hljs-keyword">where</span> grade<span class="hljs-operator">&gt;=</span>平均分;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询计算机学院选修了数据库原理课程的学生的学号、姓名和成绩</span><br><span class="hljs-keyword">select</span> 学号,姓名,成绩<br><span class="hljs-keyword">from</span> cs_stu.学习,课程<br><span class="hljs-keyword">where</span> cs_stu.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">and</span> 学习.课程号<span class="hljs-operator">=</span>课程.课程号<br><span class="hljs-keyword">and</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span>;<br><br><span class="hljs-comment">-- 转换为</span><br><span class="hljs-keyword">select</span> 学号,姓名,成绩<br><span class="hljs-keyword">from</span> 学生 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 学习 <span class="hljs-keyword">on</span> 学生.学号<span class="hljs-operator">=</span>学习.学号<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 课程 <span class="hljs-keyword">on</span> 课程.课程号<span class="hljs-operator">=</span>学习.课程号 <br><span class="hljs-keyword">where</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库原理&#x27;</span><br><span class="hljs-keyword">and</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>更新视图（其实就是更新基本表）</p></li><li><p>不一定所有视图都是可以更新的，只有从单个基本表导出来的并且只是去掉了某些行和列的视图才可以更新（称之为行列子集视图）</p><ul><li><p>如果视图的属性是来自于属性表达式或者常数，那么就只能删除，不能插入或者修改。</p></li><li><p>如果视图属性来自于集函数，那么是不可以更新的。</p><blockquote><p>更新学生平均成绩视图，把学号为091527的学生的平均成绩改为90</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> STU_AVG<br><span class="hljs-keyword">SET</span> 平均成绩<span class="hljs-operator">=</span><span class="hljs-number">90</span><br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091527&#x27;</span>;<br><span class="hljs-comment">-- stu_avg中平均成绩是avg(成绩)，有函数，不能更新</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>如果视图定义当中有group by，那么就不可以对他进行更新。</p></li><li><p>视图定义有distinct选项，那么也不可以更新。</p></li><li><p>如果视图定义有嵌套查询，而且嵌套查询的子句涉及该视图的基本表，那么也是不可以更新的。</p></li><li><p>如果视图有两个及以上的基本表构成，也不能更新。</p></li><li><p>在一个不允许更新的视图上定义一个新的视图，那么新的视图也不能够更新。</p><blockquote><p>建立考试成绩在总平均分之上的学生的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> good_stu<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学号,课程号,成绩<br><span class="hljs-keyword">from</span> 学习<br><span class="hljs-keyword">where</span> 成绩<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(成绩)<br><span class="hljs-keyword">from</span> 学习);<br></code></pre></td></tr></table></figure></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL">cs_stu 定义：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cs_stu<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> 学号,姓名,籍贯<br><span class="hljs-keyword">from</span> 学生<br><span class="hljs-keyword">where</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>将计算机学院学生视图中学号为091503的学生姓名改成刘辰。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> cs_stu<br><span class="hljs-keyword">SET</span> 姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘辰&#x27;</span><br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091503&#x27;</span>;<br><span class="hljs-comment">-- 转换为对基本表的更新</span><br><span class="hljs-keyword">UPDATE</span> 学生<br><span class="hljs-keyword">SET</span> 姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘辰&#x27;</span><br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091503&#x27;</span> <span class="hljs-keyword">and</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>向计算机学院的学生视图中国插入一个新的学生记录（学号：091622，姓名：赵新，籍贯：浙江）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> CS_STU<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;091622&#x27;</span>,赵新,浙江);<br><span class="hljs-comment">-- 转换为对基本表的更新</span><br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> 学生(学号,姓名,籍贯,学院)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;091622&#x27;</span>,<span class="hljs-string">&#x27;赵新&#x27;</span>,<span class="hljs-string">&#x27;浙江&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除计算机学院的学生视图中学号为091422的学生记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> CS_STU<br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091422&#x27;</span>;<br>#转换为基本表的删除<br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> 学生<br><span class="hljs-keyword">WHERE</span> 学号<span class="hljs-operator">=</span><span class="hljs-string">&#x27;091422&#x27;</span> <span class="hljs-keyword">AND</span> 学院<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据控制"><a href="#数据控制" class="headerlink" title="数据控制"></a>数据控制</h3><ul><li><p>授权</p><ul><li><p>把学生表查询权限授予用户user1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">TABLE</span> 学生<br><span class="hljs-keyword">TO</span> USER1;<br></code></pre></td></tr></table></figure></li><li><p>把查询学习表和修改成绩权限授权user2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">UPDATE</span>(成绩),<span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> 学习<br><span class="hljs-keyword">to</span> user2;<br></code></pre></td></tr></table></figure></li><li><p>DBA把在数据库SMD中建立表的权限授予用户3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span><br><span class="hljs-keyword">ON</span> DATABASE SMD<br><span class="hljs-keyword">TO</span> USER3;<br></code></pre></td></tr></table></figure></li><li><p>把学生表的insert权限授予user6用户，并允许他将这个权限授予别人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> 学生<br><span class="hljs-keyword">to</span> user6<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<span class="hljs-comment">-- 不加最后这句话就不能传播权限</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>收回权限(把grant改成revoke)</p><ul><li>级联回收user6-&gt;user7-&gt;user8······</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>课程复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改传输层的数据流</title>
    <link href="/2022/04/04/11-2/11-2/"/>
    <url>/2022/04/04/11-2/11-2/</url>
    
    <content type="html"><![CDATA[<p>传输层是 TCP&#x2F;IP 参考模型中的第三层，主要负责向两个主机中进程之间的通信提供服务。在传输层中，主要使用的协议是 TCP 和 UDP。其中，一些特定的服务都有固定端口。例如，Web 服务的 TCP 端口为80；SSH服务的 TCP 端口为22等。用户可以通过修改端口号，将源数据包发送到一个伪服务器。下面将介绍修改传输层数据流的方法。</p><h3 id="使用-tcprewrite-工具"><a href="#使用-tcprewrite-工具" class="headerlink" title="使用 tcprewrite 工具"></a>使用 tcprewrite 工具</h3><p>tcprewrite 是 TCP 数据流重放工具集 Tcpreplay 中的一个重写数据包工具。tcprewrite 工具可以修改PCAP包里的所有报文头部，如 MAC 地址、IP 地址、端口等。下面将介绍使用 tcprewrite 工具修改数据流。</p><p>tcprewrite 工具的语法格式如下所示：</p><p>tcprewrite [-flags] [-flag [value]] [–option-name[[&#x3D;| ]value]]。</p><p>其支持的选项及含义：</p><ul><li><p><strong>-r string, –portmap&#x3D;string （修改端口号）</strong></p></li><li><p><strong>-r string, –portmap&#x3D;string （修改端口号）</strong></p></li><li><p><strong>-N string, –pnat&#x3D;string （通过伪NAT重写IP地址）</strong></p></li><li><p><strong>-S string, –srcipmap&#x3D;string （通过伪NAT改写源地址IP)</strong></p></li><li><p><strong>-D string, –dstipmap&#x3D;string (通过伪NAT改写目的地址IP)</strong></p></li><li><p><strong>-e string, –endpoints&#x3D;string （在最后两个点之间改写IP地址）</strong></p></li><li><p><strong>-b, –skipbroadcast （不重写广播和多播地址）</strong></p></li><li><p><strong>-C, –fixcsum （强制重新计算包头checksum）</strong></p></li><li><p><strong>-m number， –person&#x3D;number （指定MTU）</strong></p></li><li><p><strong>–mtu-trunc (大于指定MTU报文被截断)</strong></p></li><li><p><strong>-E, –efcs （删除以太网最后一帧的校验和（删除最后 2 个字节））</strong></p></li><li><p><strong>–ttl&#x3D;string （修改TTL值）</strong></p></li><li><p><strong>–tos&#x3D;number （修改TOS值）</strong></p></li><li><p><strong>–tclass&#x3D;number （修改tcalss值，主要用在ipv6）</strong></p></li><li><p><strong>–flowlabel&#x3D;number (修改IPv6 Flow Label)</strong></p></li><li><p><strong>-F string, –fixlen&#x3D;string (&#x3D;pad用0填充pad的值，使满足报文包头的lenth的值，&#x3D;del只留包头删除pad,主要用于抓的报文只抓了包头没有抓数据部分）</strong></p></li><li><p><strong>–skipl2broadcast （跳过重写2层的mac地址，和广播包的mac地址）</strong></p></li><li><p><strong>–skipl2broadcast （跳过重写2层的mac地址，和广播包的mac地址）</strong></p></li><li><p><strong>–skipl2broadcast （跳过重写2层的mac地址，和广播包的mac地址）</strong></p></li><li><p><strong>–skipl2broadcast （跳过重写2层的mac地址，和广播包的mac地址）</strong></p></li><li><p><strong>–hdlc-control&#x3D;number (将Ethernet协议头转成Cisco HDLC)</strong></p></li><li><p><strong>-o string, –outfile&#x3D;string （输出重写完成的文件名）</strong></p><blockquote><p>举个实例：</p></blockquote><p>修改捕获文件 test.pcap 中的端口80为8080，，并且将修改后的数据包文件保存为 tcp.pcap。具体步骤如下：</p><p>(1) 打开 test.pacp 捕获文件。（首先使用wireshark抓取）</p><p><img src="https://s2.loli.net/2022/04/09/WQ6Tf8MdiZac5Nr.png" alt="image-20220409134416883"></p><p>(2) 从上图可以看出，改捕获文件的数据包源端口为34464，目标端口为80。下面修改端口号80为8080.执行命令：</p><p>tcprewrite –portmap&#x3D;80:8080 -i &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;test.pcap -o &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;tcp.pcap</p><p>执行命令以后，将不会输出任何信息。而是在当前目录下生成了一个新的捕获文件。</p><p><img src="https://s2.loli.net/2022/04/09/gSVseZw6taDpjWY.png" alt="image-20220409134955008"></p><p>(3) 打开 tcp.pcap 捕获文件，端口已经改掉了。</p><p><img src="https://s2.loli.net/2022/04/09/yMeA4KahfZEYvHP.png" alt="image-20220409135058804"></p></li></ul><h3 id="使用netsed工具"><a href="#使用netsed工具" class="headerlink" title="使用netsed工具"></a>使用netsed工具</h3><p>netsed是一款简易的数据修改工具。该工具支持对TCP和UDP的数据进行修改。渗透测试人员通过指定IP地址、端口号的方式，确定要修改的网络数据，然后再指定修改规则，就可以实现网络修改的功能。在修改规则中，用户不仅可以指定替换内容，还可以指定修改次数和数据流向。下面将介绍使用netsed工具修改数据的方法。</p><p>netsed工具的语法格式如下所示：</p><p>netsed [option] proto lport rhost rport rule1 [ rule2 … ]</p><p>其支持的选项及含义：</p><ul><li><p><strong>-4,–ipv4: 使用 IPv4 工具</strong></p></li><li><p><strong>-6.–ipv6: 使用 IPv6 工具</strong></p></li><li><p><strong>–ipany：自动判断IPv4或者IPv6</strong></p></li><li><p><strong>-h,–help: 显示帮助信息</strong></p></li><li><p><strong>rhost: 指定远程主机</strong></p></li><li><p><strong>rport：指定远程端口</strong></p></li><li><p><strong>ruleN：指定修改规则</strong></p></li><li><p><strong>falg：表示修改的数量</strong></p></li><li><p><strong>i和I：表示进站数据</strong></p></li><li><p><strong>o和O：表示出站数据</strong></p><blockquote><p>举个实例：</p></blockquote><p>使用 netsed 工具修改 TCP 数据流。例如，将传输数据中的 baidu 替换为 test，并且将修改后的数据发送到主句61.135.169.121的80端口。执行命令：</p><p>netsed –ipany tcp 443 61.135.159.121 80 s&#x2F;baidu&#x2F;test</p><p><img src="https://s2.loli.net/2022/04/09/J2fqpOk5W3rGLCM.png" alt="image-20220409134828403"></p><p>从输出的信息中可以看见，已经成功解析并且加载了一条规则，而且正在监听 TCP 的80端口。此时，攻击主机监听到的80端口数据包将会应用规则 s&#x2F;baidu&#x2F;test，然后将修改后的数据发送到主机61.135.169.121的443端口。</p><p>麻了，封校好几天了，天天摆烂，呜呜。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>网络防护与反入侵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪造DNS服务</title>
    <link href="/2022/03/26/title/"/>
    <url>/2022/03/26/title/</url>
    
    <content type="html"><![CDATA[<h5 id="大部分服务都采用身份认证的方式，限制用户对特定资源的访问和使用。实施网络欺骗后，安全人员可以通过伪造服务认证的方式，诱骗用户输入合法的身份信息，如用户名和密码。Kali-Linux提供一款伪造服务工具Responder，可以用来伪造HTTP-x2F-HTTPS、SMB、SQL-Server、RDP、FTP等多项服务。下面将介绍如何使用Responder工具伪造各种服务，以获取目标用户的身份认证信息。"><a href="#大部分服务都采用身份认证的方式，限制用户对特定资源的访问和使用。实施网络欺骗后，安全人员可以通过伪造服务认证的方式，诱骗用户输入合法的身份信息，如用户名和密码。Kali-Linux提供一款伪造服务工具Responder，可以用来伪造HTTP-x2F-HTTPS、SMB、SQL-Server、RDP、FTP等多项服务。下面将介绍如何使用Responder工具伪造各种服务，以获取目标用户的身份认证信息。" class="headerlink" title="大部分服务都采用身份认证的方式，限制用户对特定资源的访问和使用。实施网络欺骗后，安全人员可以通过伪造服务认证的方式，诱骗用户输入合法的身份信息，如用户名和密码。Kali Linux提供一款伪造服务工具Responder，可以用来伪造HTTP&#x2F;HTTPS、SMB、SQL Server、RDP、FTP等多项服务。下面将介绍如何使用Responder工具伪造各种服务，以获取目标用户的身份认证信息。"></a>大部分服务都采用身份认证的方式，限制用户对特定资源的访问和使用。实施网络欺骗后，安全人员可以通过伪造服务认证的方式，诱骗用户输入合法的身份信息，如用户名和密码。Kali Linux提供一款伪造服务工具Responder，可以用来伪造HTTP&#x2F;HTTPS、SMB、SQL Server、RDP、FTP等多项服务。下面将介绍如何使用Responder工具伪造各种服务，以获取目标用户的身份认证信息。</h5><hr><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li><p>Kali Linux默认安装了Responder工具。在使用之前，需要修改配置文件，Responder工具的配置文件为&#x2F;usr&#x2F;share&#x2F;responder&#x2F;Responder.conf。</p></li><li><p>Responder.conf文件包括三部分配置选项，分别为Responder Core、HTTP Server和HTTPS Server。下面将分别介绍每部分的配置选项。</p><ol><li>Responder Core</li></ol><p>​        Responder Core部分定义了Responder工具的基本配置，如启动的服务、挑战码、日志文件等。</p><p><img src="https://s2.loli.net/2022/03/27/8bWYq7TxB5VrLgU.png" alt="image-20220326201251404"></p><p>​        Responder默认开启了所有支持的服务，想要关闭的话，只需要设置：<br>$$<br>SMB&#x3D;OFF<br>$$<br>​        为了伪造所有服务认证，使用默认设置开启所有服务。</p><ol start="2"><li>HTTP Server</li></ol><p>​        默认配置信息如下：</p><p><img src="https://s2.loli.net/2022/03/27/kTPN3l6x7RvzJdi.png" alt="image-20220326201111699"></p><p>​    </p><ol start="3"><li><p>HTTPS Server</p><p>​    对HTTPS服务默认配置如下：</p></li></ol></li></ul><p><img src="https://s2.loli.net/2022/03/27/MksabcCNGUgdvo5.png" alt="image-20220326201404884"></p><h3 id="伪造DNS服务"><a href="#伪造DNS服务" class="headerlink" title="伪造DNS服务"></a>伪造DNS服务</h3><p>DNS服务主要用来实现域名解析。用户通过伪造DNS服务，则可以将目标主机请求的域名解析到一个错误的地址，如攻击主机的IP地址。这样，便于伪造基于域名方式的其他服务认证。Responder工具中，内建了DNS服务，可以用来响应A类型查询。下面将使用Responder伪造DNS服务认证，以实施DNS欺骗。伪造DNS服务认证，并启用主机指纹识别。执行命令如下所示：<br>$$<br>responder -I eth0 -vf<br>$$</p><p><img src="https://s2.loli.net/2022/03/27/5AV2lqoUXrjyte8.png" alt="image-20220326202402163"></p><p><img src="https://s2.loli.net/2022/03/27/lVm7xRvrQAOUE1M.png" alt="image-20220326202641463"></p><p>如此，成功启用了Responder工具，并且开始监听信息。为了验证伪DNS服务器能够成功解析域名，我将手动修改被攻击主机DNS服务器地址，完成攻击。</p><ul><li><p>修改Linux的DNS服务器地址</p><p>​        找到配置文件：</p></li></ul><p>$$<br>&#x2F;etc&#x2F;resolv.conf<br>$$<br>​    然后把nameserve命令修改为上面我们攻击者的IP，也就是伪DNS服务器地址即可。</p><p>​    （注意一下，Linux修改文件：vim命令修改文件；x是删除；i是插入；esc退出编辑；:q表示不保存；:wq表示保存修改）</p><p><img src="https://s2.loli.net/2022/03/27/SHg8saWMQTwrUl1.png" alt="image-20220326203346232"></p><p>​        如图所示，我们已经修改完成啦！</p><ul><li>修改windows的DNS服务器地址（以windows7为例）</li></ul><p>​    <img src="https://s2.loli.net/2022/03/27/QZRiBIjvNsXYJFz.png" alt="image-20220326212856100"></p><p>点击一下确定，就改好了！</p><h3 id="下面就到了最激动人心的环节，我要开始验证能否攻击成功了！"><a href="#下面就到了最激动人心的环节，我要开始验证能否攻击成功了！" class="headerlink" title="下面就到了最激动人心的环节，我要开始验证能否攻击成功了！"></a>下面就到了最激动人心的环节，我要开始验证能否攻击成功了！</h3><ul><li>首先是攻击Linux操作系统的主机，开启Responder服务，被攻击主机开始访问网站，同时查看监听到的信息，如下：</li></ul><p><img src="https://s2.loli.net/2022/03/27/Pksdz51uB2UED68.png" alt="image-20220326215510115"></p><ul><li>然后我们攻击一下windows操作系统的主机（我用的自己的kali Linux攻击自己的windows 7），查看监听信息，如下：</li></ul><p><img src="https://s2.loli.net/2022/03/27/Q8VBh6EkXUxY3jS.png" alt="image-20220326213833765"></p><ul><li>因为正好有win10虚拟机，所以我又试了一下win10的。</li></ul><p><img src="https://s2.loli.net/2022/03/27/EpXD7WHQ84lMi3r.png" alt="image-20220326214906230"></p><p>没了，真没了，今天肚子疼，算是摸鱼了呜呜呜。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络防护与入侵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/18/hello-world/"/>
    <url>/2022/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
